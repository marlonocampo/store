import React, {useEffect, useState} from 'react';
import {
    Button, Card, CardActions, CardContent, Grid, Grow, InputAdornment, MenuItem, TextField, Typography
} from "@mui/material";
import {Add, MonetizationOnOutlined} from "@mui/icons-material";
import LocalizationProvider from "@mui/lab/LocalizationProvider";
import AdapterDateFns from "@mui/lab/AdapterDateFns";
import DatePicker from "@mui/lab/DatePicker";
import categoriaApi from '../API/categoriaApi'
import productoApi from "../API/ProductoApi";
import ListProducto from "./ListProducto";
import * as yup from 'yup'
import vF from "../ValidarFormulario";

export default function Insertar() {
    const [productos, setProductos] = useState([]);
    const [date, setDate] = useState(null);
    const [categorias, setCategorias] = useState([])
    const [valueS, setValueS] = useState('');
    const [listaProductos, setListaProductos] = useState([])
    const [accion, setAcccion] = useState(1);
    const [idLocal, setIdLocal] = useState(0);
    const [newProducto, setNewProducto] = useState({
        idL: 0,
        nombre: '',
        codigo: '',
        precio: 0,
        fechaingreso: '',
        stock: 0,
        categoria_id: 0,
        nombrecategoria: '',
        descripcion: '',
    });
    const [validate, setValide] = useState({
        nombre: false,
        codigo: false,
        precio: false,
        fecha: false,
        stock: false,
        categoria: false,
        descripcion: false,
    });

    useEffect(() => {
        async function getCategorias() {
            const lc = await categoriaApi.List();
            setCategorias(lc);
        }

        async function getProductos() {
            setProductos(await productoApi.List())
        }

        getProductos().then(() => console.log("Productos listadas!"))
        getCategorias().then(() => console.log("Categorías Listados!"))
    }, []);

    const selectChange = (event) => {
        setValueS(event.target.value)
    }

    const inputChange = (event) => {
        setNewProducto({
            ...newProducto, //ver video
            [event.target.name]: event.target.value
        })
    };

    const validar = () => {
        if (newProducto.nombre.length === 0) {
            validate.nombre = true
        }
        if (newProducto.codigo.length === 0 ) {
            validate.codigo = true
        }
        if (newProducto.precio === 0 || newProducto.codigo === 0) {
            validate.precio = true
        }
        if (newProducto.fechaingreso.length === 0) {
            validate.fecha = true
        }
        if (newProducto.stock === 0) {
            validate.stock = true
        }
        if (newProducto.categoria_id.length === 0) {
            validate.categoria = true
        }
        if (newProducto.descripcion.length === 0) {
            validate.descripcion = true
        }

    }

    const anadir = () => {
        newProducto.fechaingreso = vF.FormatDate({date});
        newProducto.categoria_id = valueS;
        categorias.map((cat) => (valueS === cat.id ? newProducto.nombrecategoria = cat.nombre : null))
        setIdLocal(idLocal + 1);
        newProducto.idL = idLocal;
        validar()// VALIDAR EL FORMULARIO ANTES DE INSERTAR PRODUCTOS
        //setListaProductos([...listaProductos, newProducto]);
        //setAcccion(2);
    }

    return (<>
        <Grid item xs={12} sm={10} md={4} lg={4} xl={4}>
            <Grow in={true} timeout={150}>

                <Card sx={{margin: 2, overflow: 'auto', paddingBottom: 2}}>
                    <CardContent>
                        <Typography marginBottom={1} variant='h6' fontWeight={600} color='primary.main'
                                    align='center'>
                            Agregar Productos
                        </Typography>
                        <Grid container spacing={2} paddingX={3} justifyContent='center'>
                            <Grid item xs={12} lg={12}>
                                <TextField
                                    onChange={inputChange}
                                    onBlur={() => setValide({...validate, nombre: (newProducto.nombre.length === 0)})}
                                    error={validate.nombre && newProducto.nombre.length === 0}
                                    name='nombre'
                                    fullWidth
                                    label="Nombre"
                                    margin='dense'
                                    variant="outlined"
                                    placeholder="Nombre Producto"
                                    size="normal"
                                    inputProps={{maxLength: 19}}
                                />
                            </Grid>

                            <Grid item xs={6} sm={6} md={6} lg={6}>
                                <TextField
                                    name="codigo"
                                    onChange={inputChange}
                                    onBlur={() => setValide({...validate, codigo: (newProducto.codigo.length === 0)})}
                                    error={validate.codigo && newProducto.codigo.length === 0}
                                    fullWidth
                                    sx={{borderRadius: 4}}
                                    margin="none"
                                    variant="outlined"
                                    label="Código"
                                    size="small"
                                    inputProps={{maxLength: 9}}
                                >
                                </TextField>
                            </Grid>
                            <Grid item xs={6} sm={6} md={6} lg={6}>
                                <TextField
                                    name="precio"
                                    onChange={inputChange}
                                    onBlur={() => setValide({...validate, precio: (newProducto.precio === 0)})}
                                    error={validate.precio && newProducto.precio === 0}
                                    fullWidth
                                    margin='none'
                                    variant="outlined"
                                    label="precio"
                                    size="small"
                                    type="number"
                                    InputProps={{
                                        endAdornment: (<InputAdornment position="end">
                                            <MonetizationOnOutlined/>
                                        </InputAdornment>)
                                    }}
                                >
                                </TextField>
                            </Grid>

                            <Grid item xs={6} sm={6} md={6} lg={6}>
                                <LocalizationProvider dateAdapter={AdapterDateFns}>
                                    <DatePicker
                                        value={date}
                                        name='fecha'
                                        label="Fecha"
                                        inputFormat='dd/MM/yyyy'
                                        onChange={setDate}
                                        renderInput={(params) => <TextField
                                            {...params}
                                            onBlur={() => setValide({
                                                ...validate,
                                                fecha: (newProducto.fechaingreso.length === 0)
                                            })}
                                            error={validate.fecha}
                                            margin='none'
                                            fullWidth
                                            variant='outlined'
                                            size='small'
                                        />}
                                    />
                                </LocalizationProvider>
                            </Grid>
                            <Grid item xs={6} sm={6} md={6} lg={6}>
                                <TextField
                                    name="stock"
                                    onChange={inputChange}
                                    onBlur={() => setValide({...validate, stock: (newProducto.stock === 0)})}
                                    error={validate.stock && newProducto.stock === 0}
                                    fullWidth
                                    margin='none'
                                    variant="outlined"
                                    label="Stock"
                                    size="small"
                                    type="number"
                                >
                                </TextField>
                            </Grid>
                            <Grid item xs={12} lg={12}>
                                <TextField
                                    onChange={selectChange}
                                    name="categoria"
                                    onBlur={() => setValide({...validate, categoria: newProducto.categoria_id === 0})}
                                    error={validate.categoria && newProducto.categoria_id === 0}
                                    value={valueS}
                                    fullWidth
                                    select
                                    variant='outlined'
                                    size="small"
                                    label="Categoría"
                                    margin='none'
                                >
                                    {categorias.map((cat) => (
                                        <MenuItem key={cat.id} value={cat.id}>
                                            {cat.nombre}
                                        </MenuItem>
                                    ))}
                                </TextField>
                            </Grid>
                            <Grid item xs={12} lg={12}>
                                <TextField
                                    name='descripcion'
                                    onChange={inputChange}
                                    onBlur={() => setValide({
                                        ...validate,
                                        descripcion: (newProducto.descripcion.length === 0)
                                    })}
                                    error={validate.descripcion && newProducto.descripcion.length === 0}
                                    fullWidth
                                    variant='outlined'
                                    multiline
                                    rows={3}
                                    size="small"
                                    label="Descripción"
                                    margin='none'
                                    type='text'
                                    inputProps={{maxLength: 50}}
                                >
                                </TextField>
                            </Grid>
                        </Grid>
                    </CardContent>
                    <CardActions sx={{display: 'flex', justifyContent: 'center', paddingX: 3}}>
                        <Button
                            sx={{boxShadow: 5, flexWrap: 'wrap', overflow: 'hidden', width: '75%'}}
                            variant="contained"
                            size="large"
                            startIcon={<Add color='white'/>}
                            type='submit'
                            onClick={() => anadir()}
                        >
                            Añadir
                        </Button>
                    </CardActions>
                </Card>
            </Grow>
        </Grid>
        <Grid item xs={12} md={8} lg={8}>
            <ListProducto
                productos={productos ? productos : []}
                accion={accion}
                setAccion={setAcccion}
                listaProductos={listaProductos.length > 0 ? listaProductos : []}
                setListaProductos={setListaProductos}
                categorias={categorias}
            />
        </Grid>
    </>)
}